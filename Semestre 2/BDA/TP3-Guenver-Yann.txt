//
//  TP3-Guenver-Yann.txt
//
//
//  Created by Yann Guenver
//

-- Question 1
DROP SCHEMA IF EXISTS tp_note;
CREATE SCHEMA tp_note;
SET search_path TO tp_note, "$user";

-- Question 2
CREATE TABLE ville (
	id_ville serial PRIMARY KEY,
	nom_ville varchar(30),
	code_postal int
);

CREATE TABLE adresse (
	id_adresse serial PRIMARY KEY,
	type_voie varchar(30) CHECK ('rue','avenue','boulevard',NULL),
	nom_voie varchar(60),
	ville int REFERENCES ville(id_ville)
);

-- Question 3
INSERT INTO ville VALUES (DEFAULT, 'Le Mans', '72000');
INSERT INTO ville VALUES (DEFAULT, 'Paris', '75000');

INSERT INTO adresse VALUES (DEFAULT, 'rue', 'du pain', (select id_ville from ville where nom_ville='Le Mans'));
INSERT INTO adresse VALUES (DEFAULT, 'Avenue', 'des Anges', (select id_ville from ville where nom_ville='Paris'));

-- Question 4
ALTER TABLE magasin ADD COLUMN id_adresse integer REFERENCES adresse(id_adresse);
UPDATE magasin SET id_adresse = 1 WHERE id_magasin = 1;
UPDATE magasin SET id_adresse = 2 WHERE id_magasin = 2;
ALTER TABLE magasin DROP COLUMN adresse;

-- Question 5
ALTER TABLE client ADD COLUMN statut varchar(30); 

-- Question 6
SELECT count(*) FROM personne WHERE id_pers IN (SELECT id_pers FROM film) AND id_pers IN (SELECT id_pers FROM acteur WHERE id_film IN (SELECT id_film FROM film NATURAL JOIN genre WHERE nom_genre = 'Drame'));

-- Question 7
SELECT titre,count(*) AS nb_location FROM film NATURAL JOIN dvd NATURAL JOIN emprunt GROUP BY titre;

-- Question 8
CREATE OR REPLACE VIEW views AS SELECT id_dvd, titre, nom_pers AS nom_real, nom_genre, id_magasin FROM film NATURAL JOIN dvd NATURAL JOIN genre NATURAL JOIN personne;

-- QUESTION 9
CREATE OR REPLACE FUNCTION aff_film(genre varchar(30), magasin integer)
RETURNS SETOF RECORD AS $$
BEGIN
	
	...
END;
$$ LANGUAGE plpgsql;










